(test 'listparse-1 '(a b c d e) '(a . (b . (c . (d . (e . ()))))))
(test 'listparse-2 '(a b c . d) '(a . (b . (c . d))))

(test 'pair?-1 (pair? '(a . b)) #t)
(test 'pair?-2 (pair? '(a b c)) #t)
(test 'pair?-3 (pair? '()) #f)
(test 'pair?-4 (pair? '#(a b)) #f)

(test 'cons-1 (cons 'a '()) '(a))
(test 'cons-2 (cons '(a) '(b c d)) '((a) b c d))
(test 'cons-3 (cons 'a '(b c)) '(a b c))
(test 'cons-4 (cons 'a 'b) '(a . b))
(test 'cons-5 (cons '(a b) 'c) '((a b) . c))

(test-error 'car-1 (car 'a))
(test-error 'car-2 (car '()))
(test 'car-3 (car '(a b c)) 'a)
(test 'car-4 (car '((a) b c d)) '(a))
(test 'car-5 (car '(a . b)) 'a)

(test-error 'cdr-1 (cdr 'a))
(test-error 'cdr-2 (cdr '()))
(test 'cdr-3 (cdr '(a)) '())
(test 'cdr-4 (cdr '(a b c)) '(b c))
(test 'cdr-5 (cdr '(a . b)) 'b)

(test-error 'set-car!-1 (set-car! 'a 'a))
(test-error 'set-car!-2 (set-car! '() 'a))
(test-error 'set-car!-3 (set-car! '(a) 'b))
(test 'set-car!-4
  (let ((a (list 'b 'c)))
    (set-car! a '())
	a)
  '(() c))

(test-error 'set-cdr!-1 (set-cdr! 'a 'a))
(test-error 'set-cdr!-2 (set-cdr! '() 'a))
(test-error 'set-cdr!-3 (set-cdr! '(a) 'b))
(test 'set-cdr!-4
  (let ((a (list 'a)))
    (set-cdr! a 'b)
	a)
  '(a . b))
(test 'set-cdr!-5
  (let ((a (list 'a 'b)))
    (set-cdr! a '())
	a)
  '(a))
(test 'set-cdr!-6
  (let ((a (cons 'a 'b)))
    (set-cdr! a '(b c))
	a)
  '(a b c))

(test 'null?-1 (null? 'a) #f)
(test 'null?-2 (null? '()) #t)
(test 'null?-3 (null? '(a . b)) #f)

(test 'list?-1 (list? 'a) #f)
(test 'list?-2 (list? '(a b)) #t)
(test 'list?-3 (list? '(a . b)) #f)
(test 'list?-4 (list? '()) #t)

(test 'list-1 (list) '())
(test 'list-2 (list 'a 'b 'c) '(a b c))

(test-error 'length-1 (length 'a))
(test 'length-2 (length '()) 0)
(test 'length-3 (length '(a b c)) 3)
(test 'length-4 (length '(a (b) (c (d)) e)) 4)

(test-error 'append-1 (append 'a '()))
(test 'append-2 (append) '())
(test 'append-3 (append 'a) 'a)
(test 'append-4 (append '() 'a) 'a)
(test-error 'append-5 (append '(a . b) 'c))
(test 'append-6 (append '(a b) 'c) '(a b . c))
(test 'append-7 (append '(a b) '(c d) '(e)) '(a b c d e))
(test 'append-8
  (let* ((a (list 'w))
         (b (list 'x))
	 (c (append a b)))
    (set-car! c 'y)
    (set-car! (cdr c) 'z)
    (list a b))
  '((w) (z)))

(test-error 'reverse-1 (reverse 'a))
(test 'reverse-2 (reverse '()) '())
(test 'reverse-3 (reverse '(a)) '(a))
(test 'reverse-4 (reverse '(a b c)) '(c b a))
(test 'reverse-5 (reverse '(a (b c) d (e (f)))) '((e (f)) d (b c) a))

(test-error 'list-tail-1 (list-tail '(a) 2))
(test 'list-tail-2 (list-tail '(a) 1) '())
(test 'list-tail-3 (list-tail '(a b c) 1) '(b c))
(test 'list-tail-4 (list-tail '(a b . c) 2) 'c)
(test-error 'list-tail-5 (list-tail '(a . b) 2))
(test 'list-tail-6 (list-tail '(a b c) 0) '(a b c))

(test-error 'list-ref-1 (list-ref '(a) 2))
(test-error 'list-ref-2 (list-ref '(a) 1))
(test 'list-ref-3 (list-ref '(a b c) 1) 'b)
(test-error 'list-ref-4 (list-ref '(a b . c) 2))
(test-error 'list-ref-5 (list-ref '(a . b) 2))
(test 'list-ref-6 (list-ref '(a b c) 0) 'a)

(test 'memq-1 (memq 'a '(a b c)) '(a b c))
(test 'memq-2 (memq 'b '(a b c)) '(b c))
(test 'memq-3 (memq 'a '(b c d)) #f)
(test 'memq-4 (memq (list 'a) '(b (a) c)) #f)
(test 'member-5 (member (list 'a) '(b (a) c)) '((a) c))

(define e '((a x) (b y) (c z)))
(test 'assq-1 (assq 'a e) '(a x))
(test 'assq-2 (assq 'b e) '(b y))
(test 'assq-3 (assq 'd e) #f)
(test 'assq-4 (assq (list 'a) '(((a)) ((b)) ((c)))) #f)
(test 'assoc-5 (assoc (list 'a) '(((a)) ((b)) ((c)))) '((a)))

