(test 'and-let*-1 (and-let* () 1) 1)
(test 'and-let*-2 (and-let* () 1 2) 2)
(test 'and-let*-3 (and-let* () ) #t)

(test 'and-let*-4 (let ((x #f)) (and-let* (x))) #f)
(test 'and-let*-5 (let ((x 1)) (and-let* (x))) 1)
(test 'and-let*-6 (and-let* ((x #f)) ) #f)
(test 'and-let*-7 (and-let* ((x 1)) ) 1)
(test-error 'and-let*-8 (and-let* ( #f (x 1))) )
(test 'and-let*-9 (and-let* ( (#f) (x 1)) ) #f)
(test-error 'and-let*-10 (and-let* (2 (x 1))) )
(test 'and-let*-11 (and-let* ( (2) (x 1)) ) 1)
(test 'and-let*-12 (and-let* ( (x 1) (2)) ) 2)
(test 'and-let*-13 (let ((x #f)) (and-let* (x) x)) #f)
(test 'and-let*-14 (let ((x "")) (and-let* (x) x)) "")
(test 'and-let*-15 (let ((x "")) (and-let* (x)  )) "")
(test 'and-let*-16 (let ((x 1)) (and-let* (x) (+ x 1))) 2)
(test 'and-let*-17 (let ((x #f)) (and-let* (x) (+ x 1))) #f)
(test 'and-let*-18 (let ((x 1)) (and-let* (((positive? x))) (+ x 1))) 2)
(test 'and-let*-19 (let ((x 1)) (and-let* (((positive? x))) )) #t)
(test 'and-let*-20 (let ((x 0)) (and-let* (((positive? x))) (+ x 1))) #f)
(test 'and-let*-21 (let ((x 1)) (and-let* (((positive? x)) (x (+ x 1)))
                                          (+ x 1)))  3)

; Theoretically an error, but I'm not going to check for doubles variables
; in the claws.

;(test-error 'and-let*-22
;  (let ((x 1)) (and-let* (((positive? x)) (x (+ x 1))
;                                       (x (+ x 1))) (+ x 1)))
;  )

(test 'and-let*-23 (let ((x 1)) (and-let* (x ((positive? x))) (+ x 1))) 2)
(test 'and-let*-24 (let ((x 1)) (and-let* ( ((begin x)) ((positive? x)))
                                          (+ x 1))) 2)
(test 'and-let*-25 (let ((x 0)) (and-let* (x ((positive? x))) (+ x 1))) #f)
(test 'and-let*-26 (let ((x #f)) (and-let* (x ((positive? x))) (+ x 1))) #f)
(test 'and-let*-27 (let ((x #f)) (and-let* ( ((begin x)) ((positive? x)))
                                           (+ x 1))) #f)
(test 'and-let*-28 (let ((x 1)) (and-let* (x (y (- x 1)) ((positive? y)))
                                          (/ x y))) #f)
(test 'and-let*-29 (let ((x 0)) (and-let* (x (y (- x 1)) ((positive? y)))
                                          (/ x y))) #f)
(test 'and-let*-30 (let ((x #f)) (and-let* (x (y (- x 1)) ((positive? y)))
                                           (/ x y))) #f)
(test 'and-let*-31 (let ((x 4)) (and-let* (x (y (- x 2)) ((positive? y)))
                                          (/ x y))) 2)
